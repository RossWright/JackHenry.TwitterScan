@page "/"

<PageTitle>Twitter Scan</PageTitle>

@if (countStats == null || hashtagStats == null)
{
    if (error == null)
    {
        <p>Connecting to service at @httpClient.BaseAddress</p>
    }
    else
    {
        <p>@error</p>
    }
}
else
{
    <p>Connected to service at @httpClient.BaseAddress</p>

    @if (countStats != null && hashtagStats != null)
    {
        <p>Elapsed Seconds: @($"{countStats.ElapsedSeconds:0.0}")</p>
        <p>Tweet Count: @($"{countStats.Count:0,0}")</p>
        <p>Tweets Per Second: @($"{countStats.Count / countStats.ElapsedSeconds:0,0}")</p>

        <table>
            <thead>
                <tr>
                    <th>Rank</th>
                    <th>Hashtag</th>
                    <th>Occurances</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var i = 1;
                    foreach (var hashtag in hashtagStats.TopTenHashtags)
                    {
                        <tr>
                            <td>@(i++)</td>
                            <td>#@hashtag.Tag</td>
                            <td>@($"{hashtag.Count:0,0} ({hashtag.Count / (double)countStats.Count:0.00}%)")</td>
                        </tr>                
                    }
                }
            </tbody>
        </table>
    }
}
@inject HttpClient httpClient
@code
{
    TweetCountStatistics? countStats;
    TweetHashtagStatistics? hashtagStats;
    string? error = null;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(httpClient.BaseAddress?.AbsoluteUri))
        {
            error = "No API Server specified in application configuration";
            return;
        }

        while (true)
        {
            try
            {
                countStats = await httpClient.GetFromJsonAsync<TweetCountStatistics>("count");
                hashtagStats = await httpClient.GetFromJsonAsync<TweetHashtagStatistics>("hashtags");
            }
            catch (Exception ex)
            {
                error = $"Unable to connect to server {httpClient.BaseAddress}: {ex.Message}";
                break;
            }
            StateHasChanged();
            await Task.Delay(500);
        }
    }
}